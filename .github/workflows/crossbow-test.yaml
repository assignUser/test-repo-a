name: Crossbow
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/crossbow-test.yaml



jobs:        
  r-packages:
    name: ${{ matrix.platform }} ${{ matrix.r_version.r }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - windows-latest
        r_version:
          - { rtools: 40, r: "4.1" }

    steps:
      - name: Save PATH
        id: path 
        shell: bash
        run: |
          echo "::set-output name=path::$(which bash)" 

      - name: Setup local repo
        shell: bash
        run: |
          mkdir -p repo/libarrow/bin/windows
          mkdir -p repo/src/contrib/
      - name: Get windows binary
        shell: bash
        run: |
          curl https://nightlies.apache.org/arrow/r/libarrow/bin/windows/arrow-8.0.0.20220612.zip -o repo/libarrow/bin/windows/arrow-8.0.0.20220612.zip
      - name: Get src pkg
        shell: bash
        run: |
          curl https://nightlies.apache.org/arrow/r/src/contrib/arrow_8.0.0.20220612.tar.gz -o repo/src/contrib/arrow_8.0.0.20220612.tar.gz
      - name: Update repo index
        shell: Rscript {0}
        run: |
          # getwd() is necessary as this macro is used within jobs using a docker container
          tools::write_PACKAGES(file.path(getwd(), "repo/src/contrib", fsep = "/"), type = "source", verbose = TRUE)
          
      - name: Add dev repo to .Rprofile
        shell: Rscript {0}
        run: |
          str <- paste0("options(arrow.dev_repo ='file://", getwd(), "/repo' )")
          profile_path <- ".Rprofile" #file.path(path.expand("~"), ".Rprofile")
          write(str, file = profile_path, append = TRUE)

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.r_version.r }}
          rtools-version: ${{ matrix.r_version.rtools }}
          Ncpus: 2
      - name: Build Binary
        id: build
        shell: Rscript {0}
        env:  
          ARROW_R_DEV: TRUE
        run: |
          print(file.path(path.expand("~"), ".Rprofile"))
          on_windows <- tolower(Sys.info()[["sysname"]]) == "windows"
          # Install dependencies by installing (yesterday's) binary, then removing it
          install.packages(c("arrow", "cpp11"),
            type = "binary",
            repos = c("https://nightlies.apache.org/arrow/r", "https://cloud.r-project.org")
          )
          cat("Remove old arrow version.\n")
          remove.packages("arrow")
          
          # Build
          Sys.setenv(MAKEFLAGS = paste0("-j", parallel::detectCores()))
          INSTALL_opts <- "--build"
          if (!on_windows) {
            # Windows doesn't support the --strip arg
            INSTALL_opts <- c(INSTALL_opts, "--strip")
          }
          print( getOption("arrow.dev_repo"))
          cat("Install arrow from dev repo.\n")
          install.packages(
            "arrow",
            type = "source",
            repos = getOption("arrow.dev_repo"),
            INSTALL_opts = INSTALL_opts
          )
          # Test
          library(arrow)
          read_parquet(system.file("v0.7.1.parquet", package = "arrow"))
          # encode contrib.url for artifact name
          cmd <- paste0(
            "::set-output name=path::", 
            gsub(
              "/", "__",
              contrib.url("", type = "binary")
            ),
            "\n"
          )
          cat(cmd)
