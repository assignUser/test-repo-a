# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Upload R Nightly builds

on:
  push:
  workflow_dispatch:
    inputs:
      prefix:
        description: Job prefix to use.
        required: false
        default: ''
#   schedule:
#     #Crossbow packagin runs at 0 8 * * *
#     - cron: '0 14 * * *'

jobs:
  upload:
    env:
      PREFIX: ${{ github.event.inputs.prefix || ''}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          path: arrow
          repository: assignUser/arrow
          ref: r-nightly-2
          submodules: recursive
      - name: Checkout Crossbow
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: crossbow
          repository: ursacomputing/crossbow
          ref: master 
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          cache: 'pip'
          python-version: 3.8
      - name: Install Archery
        shell: bash
        run: pip install -e arrow/dev/archery[all]
      - run: mkdir -p binaries
      - name: Download Artifacts
        run: |
          if [ -z $PREFIX ]; then
            PREFIX=nightly-packaging-$(date +%Y-%m-%d)-0
          fi
          echo $PREFIX

          archery crossbow download-artifacts -f r-nightly-packages -t binaries $PREFIX
          ls -A binaries
          if [ -n "$(ls -A binaries/*/*/)" ]; then
            echo "found files"
            echo "GOT_FILES=true" >> $GITHUB_ENV
          else
            echo "no files found"
            echo "GOT_FILES=false" >> $GITHUB_ENV
          fi
      - name: Build Repository
        if: env.GOT_FILES == 'true'
        shell: Rscript {0}
        run: |
          art_path <- list.files("binaries",
              recursive = TRUE,
              include.dirs = TRUE,
              pattern = "r-nightly-packages$",
              full.names = TRUE
          )

          pkgs <- list.files(art_path, pattern = "r-pkg-*")
          src_i <- grep("r-pkg-src", pkgs)
          src_pkg <- pkgs[src_i]
          pkgs <- pkgs[-src_i]
          libs <- list.files(art_path, pattern = "r-libarrow*")

          matches <- regmatches(pkgs, regexec("r-pkg-(([a-z]+)-[\\.a-zA-Z0-9]+)-(\\d\\.\\d)-(arrow.+)$", pkgs))


          dir.create("repo/src/contrib", recursive = TRUE)
          file.copy(file.path(art_path, src_pkg), file.path("repo/src/contrib", sub("r-pkg-src-", "", src_pkg)))
          tools::write_PACKAGES("repo/src/contrib", type = "source", verbose = TRUE)

          for (match in matches) {
              path <- file.path("repo/bin", match[[3]], "contrib", match[[4]])
              path <- sub("macos", "macosx", path)
              dir.create(path, recursive = TRUE)
              file <- file.path(art_path, match[[1]])

              file.copy(file, file.path(path, match[[5]]))
              tools::write_PACKAGES(path, type = paste0(substring(match[[3]], 1, 3), ".binary"), verbose = TRUE)
          }

          lib_match <- regmatches(libs, regexec("r-libarrow-(windows|[[:alpha:]]+-\\d.*)-(arrow-.+)", libs))

          for (match in lib_match) {
              path <- file.path("repo/libarrow/bin", match[[2]])
              file <- file.path(art_path, match[[1]])
              dir.create(path, recursive = TRUE, showWarnings = FALSE)
              file.copy(file, file.path(path, match[[3]]))
          }
#       - run: ls -R repo
